EMPLATES_RPM_PATH = '/var/lib/qubes/template-packages/'
class QubesData(AddonData):
    bool_options = (
        'system_vms', 'disp_firewallvm_and_usbvm', 'disp_netvm','default_vms',
        'whonix_vms', 'whonix_default', 'usbvm', 'usbvm_with_netvm', 'skip'
    )

    def __init__(self, name):
        self.templates_to_install = \
            ['fedora', 'debian', 'whonix-gw', 'whonix-ws']

        self.gui_mode = False
        self.thread_dialog = None

        self.qubes_user = None

        self.seen = False


        self.configure_default_kernel()
        self.configure_dom0()
        self.configure_default_template()
        self.configure_qubes()
        self.configure_network(


    def configure_default_kernel(self):
        self.set_stage("Setting up default kernel")
        installed_kernels = os.listdir('/var/lib/qubes/vm-kernels')
        installed_kernels = [distutils.version.LooseVersion(x) for x in installed_kernels]
        default_kernel = str(sorted(installed_kernels)[-1])
        self.run_command([
            '/usr/bin/qubes-prefs', 'default-kernel', default_kernel])

    def configure_dom0(self):
        self.set_stage("Setting up administration VM (dom0)")

        for service in ['rdisc', 'kdump', 'libvirt-guests', 'salt-minion']:
            self.run_command(['systemctl', 'disable', '{}.service'.format(service) ], ignore_failure=True)
            self.run_command(['systemctl', 'stop',    '{}.service'.format(service) ], ignore_failure=True)

    def configure_default_template(self):
        self.set_stage('Setting default template')
        if self.default_template:
            self.default_template = '%s-%s' % (self.default_template, self.templates_versions[self.default_template])
            self.run_command(['/usr/bin/qubes-prefs', 'default-template', self.default_template])

    def configure_qubes(self):

        states = []
        if self.system_vms:
            states.extend(
                ('qvm.sys-net', 'qvm.sys-firewall', 'qvm.default-dispvm'))
        if self.disp_firewallvm_and_usbvm:
            states.extend(
                ('pillar.qvm.disposable-sys-firewall',
                'pillar.qvm.disposable-sys-usb'))
        if self.disp_netvm:
            states.append('pillar.qvm.disposable-sys-net')
        if self.default_vms:
            states.extend(
                ('qvm.personal', 'qvm.work', 'qvm.untrusted', 'qvm.vault'))
        if self.whonix_available and self.whonix_vms:
            states.extend(
                ('qvm.sys-whonix', 'qvm.anon-whonix'))
        if self.whonix_default:
            states.append('qvm.updates-via-whonix')
        if self.usbvm:
            states.append('qvm.sys-usb')
        if self.usbvm_with_netvm:
            states.append('pillar.qvm.sys-net-as-usbvm')

        try:
            # get rid of initial entries (from package installation time)
            os.rename('/var/log/salt/minion', '/var/log/salt/minion.install')
        except OSError:
            pass

        # Refresh minion configuration to make sure all installed formulas are included
        self.run_command(['qubesctl', 'saltutil.clear_cache'])
        self.run_command(['qubesctl', 'saltutil.sync_all'])

        for state in states:
            print("Setting up state: {}".format(state))
            if state.startswith('pillar.'):
                self.run_command(['qubesctl', 'top.enable',
                    state[len('pillar.'):], 'pillar=True'])
            else:
                self.run_command(['qubesctl', 'top.enable', state])

        try:
            self.run_command(['qubesctl', '--all', 'state.highstate'])
            # After successful call disable all the states to not leave them
            # enabled, to not interfere with later user changes (like assigning
            # additional PCI devices)
            for state in states:
                if not state.startswith('pillar.'):
                    self.run_command(['qubesctl', 'top.disable', state])
        except Exception:
            raise Exception(
                    ("Qubes initial configuration failed. Login to the system and " +
                     "check /var/log/salt/minion for details. " +
                     "You can retry configuration by calling " +
                     "'sudo qubesctl --all state.highstate' in dom0 (you will get " +
                     "detailed state there)."))

    def configure_default_dvm(self):
        self.set_stage("Creating default DisposableVM")

        dispvm_name = self.default_template + '-dvm'
        self.run_command(['/usr/bin/qubes-prefs', 'default-dispvm',
            dispvm_name])

    def configure_network(self):
        self.set_stage('Setting up networking')

        default_netvm = 'sys-firewall'
        updatevm = default_netvm
        if self.whonix_default:
            updatevm = 'sys-whonix'

        self.run_command(['/usr/bin/qvm-prefs', 'sys-firewall', 'netvm', 'sys-net'])
        self.run_command(['/usr/bin/qubes-prefs', 'default-netvm', default_netvm])
        self.run_command(['/usr/bin/qubes-prefs', 'updatevm', updatevm])
        self.run_command(['/usr/bin/qubes-prefs', 'clockvm', 'sys-net'])
        self.run_command(['/usr/bin/qvm-start', default_netvm])

